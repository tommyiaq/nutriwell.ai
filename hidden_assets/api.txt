=================================================================================================================
General Protocol Info
=================================================================================================================

All Endpoints:

- Use POST as method
- Accept application/json as input
- Emit application/json as output

- The general output format is:

  In case of success:

  {
    status: "ok",
    data: {
       ...
    }
  }
  
  In case of error:

  {
    status: "error",
    error: "error message"
  }

- All the endpoints except Login.srv and Register.srv require the .NutriWellBackend.Session cookie (which is
  returned by Login.srv)

=================================================================================================================
Endpoint /Services/Login.srv
=================================================================================================================

Authenticate the user.
Sets a cookie (.NutriWellBackend.Session) that must be passed to all the subsequent calls.
The cookie is set via Set-Cookie header and must be passed back via Cookie header.

In: {
	"mail": <e-mail>
	"pass": <sha256 of the password>
}

Out: {
	"status": "ok",
	"data": {
		"user": {
			"id": <user id>
			"firstName": <user first name>
			"lastName": <user last name>
			"mail": <user email>
			"language": <user's language>
		}
    }  
}

=================================================================================================================
Endpoint /Services/Register.srv
=================================================================================================================

Authenticate the user.
Sets a cookie (.NutriWellBackend.Session) that must be passed to all the subsequent calls.
The cookie is set via Set-Cookie header and must be passed back via Cookie header.

In: {
	"mail": <e-mail>,
	"pass": <sha256 of the password>
	"firstName": <user first name>
	"lastName": <user last name>
	"language": <user's language code (it, en, ...)>
}

Out: {
	"status": "ok",
	"data": {
		"user": {
			"id": <user id>
			"firstName": <user first name>
			"lastName": <user last name>
			"mail": <user email>
			"language": <user's language>
		}
    }  
}

=================================================================================================================
Endpoint /Services/Login.srv
=================================================================================================================

Authenticate the user.
Sets a cookie (.NutriWellBackend.Session) that must be passed to all the subsequent calls.
The cookie is set via Set-Cookie header and must be passed back via Cookie header.

In: {
	"mail": <e-mail>
	"pass": <sha256 of the password>
}

Out: {
	"status": "ok",
	"data": {
		"user": {
			"id": <user id>
			"firstName": <user first name>
			"lastName": <user last name>
			"mail": <user email>
			"language": <user's language>
		}
    }  
}


=================================================================================================================
Endpoint /Services/ChatSendMessage.srv
=================================================================================================================

Send a chat message.

The message is assumed to be part of the conversation identified by "sessionId". 
If "sessionId" is empty then it's assumed to be the last conversation the user
had after the last login. If you want to force a new session send "new" in the
"sessionId" field.

Sets a cookie (.NutriWellBackend.Session) that must be passed to all the subsequent calls.
The cookie is set via Set-Cookie header and must be passed back via Cookie header.

In: {
	"sessionId": <id of the chat session to continue> <-- optional, see above
	"input": [
		<content>,
		<content>,
		...
	]
}

with <content> being:

	<content>: <text_content>

with

	<text_content>: {
		"type": "text", <-- optional, this is the default
		"text": <text>
	}
	
In the future we may support other types of content (image/file).


Out: {
	"status": "ok",
	"data": {
		"output": [
			<content>,
			<content>,
			...
		]
	},
	"sessionId": <id of the chat session>
}


=================================================================================================================
Endpoint /Services/ChatGetMessages.srv
=================================================================================================================

Retrieve a previous chat session by its unique id

In: {
	"sessionId": <id of the chat session> <-- optional, if omitted it defaults to the last session passed
}



Out: {
	"messages": [
		{
			"role": "user",
			"content": [
				<content>,
				<content>,
				...
			]
		},
		{
			"role": "assistant",
			"content": [
				<content>,
				<content>,
				...
			]
		},
		...
	]
}